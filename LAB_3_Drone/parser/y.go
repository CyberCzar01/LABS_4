// Code generated by goyacc -o y.go -p yy parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import (
	"drone-maze/ast"
	"drone-maze/lexer"
	"fmt"
	__yyfmt__ "fmt"
	"strconv"
)

//line parser.y:2

//line parser.y:13
type yySymType struct {
	yys            int
	token          lexer.Token
	program        *ast.Program
	statement      ast.Statement
	expression     ast.Expression
	blockStatement *ast.BlockStatement
	identifier     *ast.Identifier
	statements     []ast.Statement
	expressions    []ast.Expression
	identifiers    []*ast.Identifier
	str_val        string
	int_val        int64
	ast            ast.Node
}

const TOKEN_EOF = 57346
const TOKEN_ILLEGAL = 57347
const TOKEN_SEISU = 57348
const TOKEN_RONRI = 57349
const TOKEN_RIPPOTAI = 57350
const TOKEN_HAIRETSU = 57351
const TOKEN_KANSU = 57352
const TOKEN_SHUKI = 57353
const TOKEN_SORENARA = 57354
const TOKEN_KIDO = 57355
const TOKEN_SHUSHI = 57356
const TOKEN_MODORU = 57357
const TOKEN_RUIKEI = 57358
const TOKEN_JIGEN = 57359
const TOKEN_SHINRI = 57360
const TOKEN_USO = 57361
const TOKEN_IDENTIFIER = 57362
const TOKEN_INTEGER = 57363
const TOKEN_HEX = 57364
const TOKEN_ASSIGN = 57365
const TOKEN_PLUS = 57366
const TOKEN_MINUS = 57367
const TOKEN_ASTERISK = 57368
const TOKEN_SLASH = 57369
const TOKEN_NOT = 57370
const TOKEN_LESS = 57371
const TOKEN_GREATER = 57372
const TOKEN_EQUALS = 57373
const TOKEN_NOTEQUALS = 57374
const TOKEN_AND = 57375
const TOKEN_OR = 57376
const TOKEN_ARROW = 57377
const TOKEN_PERCENT = 57378
const TOKEN_COMMA = 57379
const TOKEN_SEMICOLON = 57380
const TOKEN_COLON = 57381
const TOKEN_LPAREN = 57382
const TOKEN_RPAREN = 57383
const TOKEN_LBRACE = 57384
const TOKEN_RBRACE = 57385
const TOKEN_LBRACKET = 57386
const TOKEN_RBRACKET = 57387
const TOKEN_MOVE_UP = 57388
const TOKEN_MOVE_DOWN = 57389
const TOKEN_MOVE_LEFT = 57390
const TOKEN_MOVE_RIGHT = 57391
const TOKEN_MOVE_FORWARD = 57392
const TOKEN_MOVE_BACKWARD = 57393
const TOKEN_MEASURE_UP = 57394
const TOKEN_MEASURE_DOWN = 57395
const TOKEN_MEASURE_LEFT = 57396
const TOKEN_MEASURE_RIGHT = 57397
const TOKEN_MEASURE_FORWARD = 57398
const TOKEN_MEASURE_BACKWARD = 57399
const TOKEN_GET_POSITION = 57400
const TOKEN_BREAK_SEQUENCE = 57401

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TOKEN_EOF",
	"TOKEN_ILLEGAL",
	"TOKEN_SEISU",
	"TOKEN_RONRI",
	"TOKEN_RIPPOTAI",
	"TOKEN_HAIRETSU",
	"TOKEN_KANSU",
	"TOKEN_SHUKI",
	"TOKEN_SORENARA",
	"TOKEN_KIDO",
	"TOKEN_SHUSHI",
	"TOKEN_MODORU",
	"TOKEN_RUIKEI",
	"TOKEN_JIGEN",
	"TOKEN_SHINRI",
	"TOKEN_USO",
	"TOKEN_IDENTIFIER",
	"TOKEN_INTEGER",
	"TOKEN_HEX",
	"TOKEN_ASSIGN",
	"TOKEN_PLUS",
	"TOKEN_MINUS",
	"TOKEN_ASTERISK",
	"TOKEN_SLASH",
	"TOKEN_NOT",
	"TOKEN_LESS",
	"TOKEN_GREATER",
	"TOKEN_EQUALS",
	"TOKEN_NOTEQUALS",
	"TOKEN_AND",
	"TOKEN_OR",
	"TOKEN_ARROW",
	"TOKEN_PERCENT",
	"TOKEN_COMMA",
	"TOKEN_SEMICOLON",
	"TOKEN_COLON",
	"TOKEN_LPAREN",
	"TOKEN_RPAREN",
	"TOKEN_LBRACE",
	"TOKEN_RBRACE",
	"TOKEN_LBRACKET",
	"TOKEN_RBRACKET",
	"TOKEN_MOVE_UP",
	"TOKEN_MOVE_DOWN",
	"TOKEN_MOVE_LEFT",
	"TOKEN_MOVE_RIGHT",
	"TOKEN_MOVE_FORWARD",
	"TOKEN_MOVE_BACKWARD",
	"TOKEN_MEASURE_UP",
	"TOKEN_MEASURE_DOWN",
	"TOKEN_MEASURE_LEFT",
	"TOKEN_MEASURE_RIGHT",
	"TOKEN_MEASURE_FORWARD",
	"TOKEN_MEASURE_BACKWARD",
	"TOKEN_GET_POSITION",
	"TOKEN_BREAK_SEQUENCE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:386

// The wrapper will be in a separate file, e.g., yacc.go
// It will implement the yyLexer interface.
//
//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 99,
	38, 104,
	-2, 74,
	-1, 163,
	43, 74,
	-2, 104,
	-1, 174,
	26, 39,
	27, 39,
	36, 39,
	-2, 29,
	-1, 188,
	1, 25,
	24, 25,
	26, 25,
	27, 25,
	29, 25,
	30, 25,
	31, 25,
	32, 25,
	33, 25,
	34, 25,
	35, 25,
	36, 25,
	37, 25,
	39, 25,
	41, 25,
	43, 25,
	45, 25,
	-2, 11,
}

const yyPrivate = 57344

const yyLast = 780

var yyAct = [...]uint8{
	103, 167, 183, 17, 102, 100, 2, 112, 101, 64,
	134, 78, 79, 29, 67, 137, 65, 89, 149, 133,
	89, 80, 87, 90, 91, 87, 88, 92, 134, 88,
	76, 77, 78, 79, 135, 83, 84, 81, 82, 169,
	99, 89, 80, 72, 97, 169, 87, 104, 105, 166,
	88, 76, 77, 78, 79, 148, 83, 84, 70, 146,
	111, 75, 89, 80, 74, 94, 108, 87, 168, 63,
	73, 88, 190, 71, 168, 136, 147, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 114, 134,
	74, 65, 171, 127, 130, 131, 126, 132, 109, 107,
	106, 93, 44, 128, 95, 138, 66, 139, 140, 62,
	144, 110, 76, 77, 78, 79, 184, 141, 96, 145,
	98, 27, 36, 89, 80, 114, 10, 113, 87, 9,
	8, 7, 88, 151, 6, 152, 5, 154, 4, 159,
	34, 33, 153, 163, 164, 32, 31, 97, 30, 25,
	24, 35, 172, 28, 20, 21, 174, 175, 3, 1,
	0, 170, 176, 0, 0, 126, 0, 0, 179, 0,
	0, 0, 182, 0, 185, 180, 181, 0, 0, 186,
	0, 17, 17, 160, 161, 162, 189, 191, 165, 0,
	0, 193, 0, 194, 0, 0, 0, 197, 0, 68,
	198, 69, 38, 37, 0, 0, 0, 46, 47, 42,
	43, 44, 40, 41, 0, 76, 155, 78, 79, 23,
	83, 84, 81, 82, 85, 86, 89, 80, 0, 0,
	0, 156, 0, 39, 158, 157, 0, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 18, 19, 11, 12, 16, 38, 37, 14, 15,
	13, 46, 47, 42, 43, 44, 40, 41, 0, 0,
	22, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 26, 0, 39, 187, 45,
	0, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 18, 19, 11, 12, 16,
	38, 37, 14, 188, 13, 46, 47, 42, 43, 44,
	40, 41, 0, 0, 22, 0, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
	0, 39, 0, 45, 0, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 18,
	19, 11, 12, 16, 38, 37, 14, 15, 13, 46,
	47, 42, 43, 44, 40, 41, 0, 0, 22, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 0, 39, 0, 45, 0, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 68, 0, 69, 38, 37, 0, 0,
	0, 46, 47, 42, 43, 44, 40, 41, 0, 0,
	22, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 26, 0, 39, 0, 45,
	0, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 68, 0, 69, 38, 37,
	0, 0, 0, 46, 47, 42, 43, 44, 40, 41,
	0, 0, 22, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 26, 0, 142,
	0, 45, 0, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	78, 79, 0, 83, 84, 81, 82, 85, 86, 89,
	80, 0, 0, 0, 87, 0, 168, 0, 88, 76,
	77, 78, 79, 0, 83, 84, 81, 82, 85, 86,
	89, 80, 0, 0, 0, 87, 0, 0, 196, 88,
	76, 77, 78, 79, 0, 83, 84, 81, 82, 85,
	86, 89, 80, 0, 0, 0, 87, 195, 0, 0,
	88, 76, 77, 78, 79, 0, 83, 84, 81, 82,
	85, 86, 89, 80, 192, 0, 0, 87, 0, 0,
	0, 88, 76, 77, 78, 79, 0, 83, 84, 81,
	82, 85, 86, 89, 80, 0, 0, 0, 87, 129,
	0, 0, 88, 76, 77, 78, 79, 0, 83, 84,
	81, 82, 85, 86, 89, 80, 178, 0, 0, 87,
	0, 0, 0, 88, 76, 77, 78, 79, 0, 83,
	84, 81, 82, 85, 86, 89, 80, 143, 0, 0,
	87, 0, 0, 0, 88, 76, 77, 78, 79, 0,
	83, 84, 81, 82, 85, 86, 89, 80, 0, 0,
	0, 87, 0, 0, 177, 88, 76, 77, 78, 79,
	0, 83, 84, 81, 82, 85, 86, 89, 80, 0,
	0, 173, 87, 0, 0, 0, 88, 76, 77, 78,
	79, 0, 83, 84, 81, 82, 85, 86, 89, 80,
	0, 71, 0, 87, 0, 0, 0, 88, 76, 77,
	78, 79, 0, 83, 84, 81, 82, 85, 86, 89,
	80, 0, 0, 0, 87, 150, 0, 0, 88, 76,
	77, 78, 79, 0, 83, 84, 81, 82, 85, 86,
	89, 80, 0, 0, 0, 87, 0, 0, 0, 88,
}

var yyPact = [...]int16{
	-1000, -1000, 353, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	89, 49, 86, 405, 35, 35, 50, 693, -1000, -1000,
	-1000, -1000, 405, 405, -1000, -1000, 405, -1000, -1000, 78,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 25, 84, 405,
	-1000, -1000, -1000, -1000, -1000, 405, 5, 405, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 77, 76, -1000, 405, 75, 693, -26, 24,
	-1000, -1000, -1000, 20, 82, -1000, 405, 405, 405, 405,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 82,
	-18, -18, 588, 405, 405, 74, -24, -9, 37, 735,
	-1000, -30, 52, 735, 405, 735, 405, 457, 630, 405,
	-1000, 82, 18, 39, -1000, -15, -15, -18, -18, -18,
	27, 27, 88, 88, 6, 6, 14, -27, -1000, -1000,
	735, 714, 405, -1000, 405, -1000, 405, -1000, 191, 693,
	693, 35, 405, 405, 693, 8, 26, 82, -1000, 69,
	26, 672, 735, -1000, 735, 405, 405, 405, -1000, 651,
	-1000, -1000, -1000, 630, 609, -1000, 26, -1000, -1000, -1000,
	-1000, 405, 104, 405, -18, 588, -27, -1000, 405, -1000,
	245, 299, 735, -1000, 32, 504, 567, -1000, 35, -1000,
	405, -1000, 405, 546, 525, 26, -1000, 104, -1000,
}

var yyPgo = [...]uint8{
	0, 159, 6, 158, 0, 155, 154, 153, 151, 150,
	149, 148, 146, 145, 141, 140, 9, 138, 136, 134,
	131, 130, 129, 1, 2, 13, 8, 4, 7, 127,
	126, 122, 121, 5, 120, 118, 43,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	22, 36, 36, 17, 17, 17, 17, 30, 30, 30,
	18, 19, 20, 21, 23, 23, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 5,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
	7, 7, 7, 25, 11, 12, 16, 13, 28, 28,
	29, 29, 26, 26, 27, 27, 9, 24, 24, 24,
	10, 14, 14, 15, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 32, 35,
	35, 34, 34, 34, 33, 31,
}

var yyR2 = [...]int8{
	0, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	2, 0, 1, 5, 5, 5, 5, 1, 1, 1,
	3, 2, 2, 6, 3, 3, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 1, 1, 3, 4, 4, 6, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 9, 5, 0, 1,
	1, 3, 0, 1, 1, 3, 6, 0, 2, 6,
	7, 4, 5, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 2, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -17, -18, -19, -20, -21, -22,
	-30, 8, 9, 15, 13, 14, 10, -4, 6, 7,
	-6, -5, 25, 28, -9, -10, 40, -32, -7, -25,
	-11, -12, -13, -14, -15, -8, -31, 12, 11, 42,
	21, 22, 18, 19, 20, 44, 16, 17, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 20, 20, -16, 42, 20, -4, 8, 10,
	-36, 38, -36, 20, 40, -36, 24, 25, 26, 27,
	36, 31, 32, 29, 30, 33, 34, 40, 44, 35,
	-4, -4, -4, 23, 40, 20, -35, -27, -34, -4,
	-33, -26, -27, -4, 42, -4, 23, 23, -4, 23,
	-36, 40, -28, -29, -25, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, -26, -27, -25, 41,
	-4, -4, 23, 43, 37, 43, 38, 45, -4, -4,
	-4, -16, 42, 37, -4, -28, 41, 37, 41, 45,
	41, -4, -4, -33, -4, 25, 40, 44, 43, -4,
	-36, -36, -36, -4, -4, -36, 41, -23, 42, 13,
	-25, 23, -23, 39, -4, -4, -27, 43, 37, -23,
	-2, -2, -4, -24, 12, -4, -4, 43, 14, -23,
	40, -23, 37, -4, -4, 41, 43, -23, -24,
}

var yyDef = [...]int8{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	0, 0, 0, 0, 11, 11, 0, 11, 17, 18,
	26, 27, 0, 0, 41, 42, 0, 48, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 0, 0, 99,
	59, 60, 61, 62, 63, 72, 0, 0, 84, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 0, 0, 65, 0, 0, 11, 0, 0,
	21, 12, 22, 0, 68, 10, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	39, 40, 0, 0, 0, 0, 0, 0, 100, -2,
	101, 0, 73, 74, 0, 83, 0, 0, 0, 0,
	20, 68, 0, 69, 70, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 0, 0, 47, 43,
	49, 0, 0, 98, 0, 105, 103, 64, 0, 11,
	11, 11, 99, 0, 11, 0, 0, 0, 44, 45,
	0, 0, 75, 102, 104, 0, 72, 72, 81, 0,
	13, 14, 15, -2, 0, 16, 0, 67, 2, 2,
	71, 0, 77, 0, -2, 74, 0, 82, 0, 23,
	0, 0, 46, 76, 0, 0, 0, 24, -2, 78,
	0, 80, 0, 0, 0, 0, 66, 77, 79,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:84
		{
			lex.result = &ast.Program{Statements: yyDollar[1].statements}
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:90
		{
			yyVAL.statements = []ast.Statement{}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:93
		{
			yyVAL.statements = append(yyDollar[1].statements, yyDollar[2].statement)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:99
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:100
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:101
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:102
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:103
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:104
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:108
		{
			yyVAL.statement = &ast.ExpressionStatement{Token: lexer.Token{}, Expression: yyDollar[1].expression}
		}
	case 13:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:119
		{
			ident := &ast.Identifier{Token: yyDollar[2].token, Value: yyDollar[2].token.Literal}
			yyVAL.statement = &ast.VariableDeclaration{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal, Name: ident, Value: yyDollar[4].expression}
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:123
		{
			ident := &ast.Identifier{Token: yyDollar[2].token, Value: yyDollar[2].token.Literal}
			yyVAL.statement = &ast.VariableDeclaration{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal, Name: ident, Value: yyDollar[4].expression}
		}
	case 15:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:127
		{
			ident := &ast.Identifier{Token: yyDollar[2].token, Value: yyDollar[2].token.Literal}
			yyVAL.statement = &ast.VariableDeclaration{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal, Name: ident, Value: yyDollar[4].expression}
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:131
		{
			ident := &ast.Identifier{Token: yyDollar[2].token, Value: yyDollar[2].token.Literal}
			yyVAL.statement = &ast.VariableDeclaration{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal, Name: ident, Value: yyDollar[4].expression}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:138
		{
			yyVAL.token = yyDollar[1].token
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:139
		{
			yyVAL.token = yyDollar[1].token
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:140
		{
			yyVAL.token = yyDollar[1].token
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:144
		{
			yyVAL.statement = &ast.ReturnStatement{Token: yyDollar[1].token, ReturnValue: yyDollar[2].expression}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:150
		{
			yyVAL.statement = &ast.BreakStatement{Token: yyDollar[1].token}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:156
		{
			yyVAL.statement = &ast.ContinueStatement{Token: yyDollar[1].token}
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:162
		{
			name := &ast.Identifier{Token: yyDollar[2].token, Value: yyDollar[2].token.Literal}
			yyVAL.statement = &ast.FunctionDeclaration{Token: yyDollar[1].token, Name: name, Parameters: yyDollar[4].identifiers, Body: yyDollar[6].blockStatement}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:169
		{
			yyVAL.blockStatement = &ast.BlockStatement{Token: yyDollar[1].token, Statements: yyDollar[2].statements}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:172
		{
			yyVAL.blockStatement = &ast.BlockStatement{Token: yyDollar[1].token, Statements: yyDollar[2].statements}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:179
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:180
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:181
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "+", Right: yyDollar[3].expression}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:182
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "-", Right: yyDollar[3].expression}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:183
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "*", Right: yyDollar[3].expression}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:184
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "/", Right: yyDollar[3].expression}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:185
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "%", Right: yyDollar[3].expression}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:186
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "==", Right: yyDollar[3].expression}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "!=", Right: yyDollar[3].expression}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:188
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "<", Right: yyDollar[3].expression}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:189
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: ">", Right: yyDollar[3].expression}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:190
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "^", Right: yyDollar[3].expression}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:191
		{
			yyVAL.expression = &ast.InfixExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Operator: "v", Right: yyDollar[3].expression}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:192
		{
			yyVAL.expression = &ast.PrefixExpression{Token: yyDollar[1].token, Operator: "-", Right: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:193
		{
			yyVAL.expression = &ast.PrefixExpression{Token: yyDollar[1].token, Operator: "~", Right: yyDollar[2].expression}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:194
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:195
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:196
		{
			yyVAL.expression = yyDollar[2].expression
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:197
		{
			yyVAL.expression = &ast.CallExpression{Token: yyDollar[2].token, Function: yyDollar[1].expression, Arguments: yyDollar[3].expressions}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:198
		{
			if len(yyDollar[3].expressions) == 1 {
				yyVAL.expression = &ast.IndexExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Index: yyDollar[3].expressions[0]}
			} else {
				yyVAL.expression = &ast.MultiIndexExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Indexes: yyDollar[3].expressions}
			}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:205
		{
			if len(yyDollar[3].expressions) == 1 {
				target := &ast.IndexExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Index: yyDollar[3].expressions[0]}
				yyVAL.expression = &ast.SetExpression{Token: yyDollar[5].token, Target: target, Value: yyDollar[6].expression}
			} else {
				target := &ast.MultiIndexExpression{Token: yyDollar[2].token, Left: yyDollar[1].expression, Indexes: yyDollar[3].expressions}
				yyVAL.expression = &ast.SetExpression{Token: yyDollar[5].token, Target: target, Value: yyDollar[6].expression}
			}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:214
		{
			yyVAL.expression = &ast.FieldAccessExpression{Token: yyDollar[2].token, Object: yyDollar[1].expression, FieldName: yyDollar[3].identifier}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:215
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:219
		{
			yyVAL.expression = &ast.AssignmentExpression{Token: yyDollar[2].token, Name: yyDollar[1].identifier, Value: yyDollar[3].expression}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:226
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:227
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:228
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:229
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:230
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:231
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:232
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:233
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:234
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:238
		{
			val, err := strconv.ParseInt(yyDollar[1].token.Literal, 0, 64)
			if err != nil {
				lex.Error(fmt.Sprintf("could not parse %q as integer: %v", yyDollar[1].token.Literal, err))
			}
			yyVAL.expression = &ast.IntegerLiteral{Token: yyDollar[1].token, Value: val}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:245
		{
			val, err := strconv.ParseInt(yyDollar[1].token.Literal[1:], 16, 64) // skip 'x'
			if err != nil {
				lex.Error(fmt.Sprintf("could not parse %q as hex: %v", yyDollar[1].token.Literal, err))
			}
			yyVAL.expression = &ast.HexLiteral{Token: yyDollar[1].token, Value: val}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:252
		{
			yyVAL.expression = &ast.Boolean{Token: yyDollar[1].token, Value: true}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:253
		{
			yyVAL.expression = &ast.Boolean{Token: yyDollar[1].token, Value: false}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:257
		{
			yyVAL.identifier = &ast.Identifier{Token: yyDollar[1].token, Value: yyDollar[1].token.Literal}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:261
		{
			yyVAL.expression = &ast.ArrayLiteral{Token: yyDollar[1].token, Elements: yyDollar[2].expressions}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:267
		{
			// a cell literal is just the body, the token is consumed to decide the rule
			yyVAL.expression = yyDollar[2].expression
		}
	case 66:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:274
		{
			yyVAL.expression = &ast.CellLiteral{Token: yyDollar[1].token, X: yyDollar[2].expression, Y: yyDollar[4].expression, Z: yyDollar[6].expression, IsObstacle: yyDollar[8].expression}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:280
		{
			yyVAL.expression = &ast.FunctionLiteral{Token: yyDollar[1].token, Parameters: yyDollar[3].identifiers, Body: yyDollar[5].blockStatement}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:286
		{
			yyVAL.identifiers = []*ast.Identifier{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:287
		{
			yyVAL.identifiers = yyDollar[1].identifiers
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:291
		{
			yyVAL.identifiers = []*ast.Identifier{yyDollar[1].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:292
		{
			yyVAL.identifiers = append(yyDollar[1].identifiers, yyDollar[3].identifier)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:296
		{
			yyVAL.expressions = []ast.Expression{}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:297
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:301
		{
			yyVAL.expressions = []ast.Expression{yyDollar[1].expression}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:302
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:306
		{
			yyVAL.expression = &ast.IfExpression{Token: yyDollar[1].token, Condition: yyDollar[3].expression, Consequence: yyDollar[5].blockStatement, Alternative: yyDollar[6].blockStatement}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:312
		{
			yyVAL.blockStatement = nil
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:313
		{
			yyVAL.blockStatement = yyDollar[2].blockStatement
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:314
		{
			inner := &ast.IfExpression{Token: yyDollar[1].token, Condition: yyDollar[3].expression, Consequence: yyDollar[5].blockStatement, Alternative: yyDollar[6].blockStatement}
			yyVAL.blockStatement = &ast.BlockStatement{Token: yyDollar[1].token, Statements: []ast.Statement{&ast.ExpressionStatement{Expression: inner}}}
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:321
		{
			ident := &ast.Identifier{Token: yyDollar[2].token, Value: yyDollar[2].token.Literal}
			yyVAL.expression = &ast.LoopExpression{Token: yyDollar[1].token, Variable: ident, Start: yyDollar[4].expression, End: yyDollar[6].expression, Body: yyDollar[7].blockStatement}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:328
		{
			yyVAL.expression = &ast.RuikeiExpression{Token: yyDollar[1].token, Left: yyDollar[3].expression, Right: nil}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:331
		{
			yyVAL.expression = &ast.RuikeiExpression{Token: yyDollar[1].token, Left: yyDollar[3].expression, Right: yyDollar[4].expression}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:337
		{
			yyVAL.expression = &ast.JigenExpression{Token: yyDollar[1].token, Array: yyDollar[2].expression}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:343
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:344
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:345
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:346
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:347
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:348
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:349
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:350
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:351
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:352
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:353
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:354
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:355
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:356
		{
			yyVAL.expression = &ast.RobotOperation{Token: yyDollar[1].token, Type: yyDollar[1].token.Literal}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:360
		{
			yyVAL.expression = &ast.SequenceExpression{Token: yyDollar[1].token, Operations: yyDollar[2].expressions}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:366
		{
			yyVAL.expressions = []ast.Expression{}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:367
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:371
		{
			yyVAL.expressions = []ast.Expression{yyDollar[1].expression}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:372
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:373
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:377
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:381
		{
			yyVAL.expression = &ast.ArrayDimensionsLiteral{Token: yyDollar[1].token, Dims: yyDollar[2].expressions}
		}
	}
	goto yystack /* stack new state and value */
}
