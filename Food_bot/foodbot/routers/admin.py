"""–†–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram import Bot
from sqlmodel import select
from sqlalchemy import delete as sa_delete

from foodbot.models import User, Canteen, Meal, Order, DailyMenu, MenuItem
from foodbot.database import get_session
from foodbot.config import settings

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

from foodbot.services.orders import build_report

admin_router = Router()


async def _is_admin(tg_id: int, username: str | None = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∞.

     –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ —É–∂–µ –∞–¥–º–∏–Ω ‚Äî True.
     –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –Ω–æ –µ–≥–æ username –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ ADMIN_USERNAMES,
     —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å —Ñ–ª–∞–≥–∞–º–∏ is_admin/is_approved –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True.
     –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî False.
    """

    admin_usernames = [u.lstrip("@").lower() for u in settings.admin_usernames.split()]

    async with get_session() as session:
        result = await session.exec(select(User).where(User.tg_id == tg_id))
        user = result.first()

        if user and user.is_admin:
            return True

        # –í–æ–∑–º–æ–∂–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç: –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, –Ω–æ —Ñ–ª–∞–≥–∏ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã
        if username:
            norm_username = username.lstrip("@").lower()
            if norm_username in admin_usernames:
                if not user:
                    user = User(
                        tg_id=tg_id,
                        full_name=username,
                        is_admin=True,
                        is_approved=True,
                    )
                    session.add(user)
                else:
                    user.is_admin = True
                    user.is_approved = True
                await session.commit()
                return True

    return False


@admin_router.message(Command("admin"))
async def cmd_admin(message: types.Message, bot: Bot) -> None:
    if not await _is_admin(message.from_user.id, message.from_user.username):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # Inline-–º–µ–Ω—é
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=_build_admin_kb())

    # –°—Ç–∞–≤–∏–º reply-–∫–Ω–æ–ø–∫—É ¬´–ê–¥–º–∏–Ω¬ª –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    admin_rkb = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="–ê–¥–º–∏–Ω")]], resize_keyboard=True)
    await message.answer("\u2060", reply_markup=admin_rkb)


@admin_router.callback_query(lambda c: c.data == "list_users")
async def callback_list_users(call: types.CallbackQuery):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    async with get_session() as session:
        users = await session.exec(select(User).where(User.is_approved == True))  # noqa: E712
        text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n" + "\n".join(
            f"{u.full_name} (id {u.tg_id})" for u in users
        )

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")],
            _home_row(),
        ]
    )
    await call.message.answer(text or "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=kb)
    await call.answer()


#  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–≤—ã–º–∏


class CanteenAddStates(StatesGroup):
    waiting_title = State()


@admin_router.callback_query(lambda c: c.data == "list_canteens")
async def callback_list_canteens(call: types.CallbackQuery, state: FSMContext):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    async with get_session() as session:
        result = await session.exec(select(Canteen))
        canteens = list(result)
        # –ö–Ω–æ–ø–∫–∏: –∑–∞–≥–æ–ª–æ–≤–æ–∫
        kb_rows: list[list[types.InlineKeyboardButton]] = []
        for c in canteens:
            status_btn = types.InlineKeyboardButton(
                text="üü¢" if c.is_active else "üî¥",
                callback_data=f"canteen_toggle:{c.id}",
            )
            del_btn = types.InlineKeyboardButton(text="üóë", callback_data=f"canteen_del:{c.id}")
            title_btn = types.InlineKeyboardButton(text=c.title, callback_data=f"canteen:{c.id}")
            kb_rows.append([title_btn, status_btn, del_btn])

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–æ–≤—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        rows = [f"{c.id}. {c.title} {'(üî¥)' if not c.is_active else ''}" for c in canteens]

    # –ö–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–æ–≤—É—é¬ª –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    kb_rows.append([types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–æ–≤—É—é", callback_data="canteen_add")])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    kb_rows.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")])
    kb_rows.append(_home_row())

    text = "–°—Ç–æ–ª–æ–≤—ã–µ:\n" + ("\n".join(rows) if rows else "–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π")
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text(text)
        await call.message.edit_reply_markup(reply_markup=kb)
    except Exception:  # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Ç–æ —à–ª—ë–º –Ω–æ–≤–æ–µ
        await call.message.answer(text, reply_markup=kb)
    await call.answer()


@admin_router.callback_query(lambda c: c.data == "canteen_add")
async def callback_canteen_add(call: types.CallbackQuery, state: FSMContext):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    await state.set_state(CanteenAddStates.waiting_title)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–æ–ª–æ–≤–æ–π:")
    await call.answer()


@admin_router.message(CanteenAddStates.waiting_title)
async def canteen_add_title(message: types.Message, state: FSMContext):
    if not await _is_admin(message.from_user.id, message.from_user.username):
        await message.reply("–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    title = message.text.strip()
    if not title:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    async with get_session() as session:
        session.add(Canteen(title=title))
        await session.commit()

    await message.answer(f"‚úÖ –°—Ç–æ–ª–æ–≤–∞—è ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤—ã—Ö, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
    from types import SimpleNamespace

    async def _dummy_answer(*args, **kwargs):
        return None

    fake_call = SimpleNamespace(message=message, from_user=message.from_user, data="list_canteens", answer=_dummy_answer)
    await callback_list_canteens(fake_call, state)  # type: ignore[arg-type]

    await state.clear()


#  –ë–ª—é–¥–∞


class MealAddStates(StatesGroup):
    waiting_title = State()
    waiting_desc = State()
    waiting_complex = State()


class MenuCreateStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –¥–Ω—è."""

    waiting_canteen = State()  # –≤—ã–±–æ—Ä —Å—Ç–æ–ª–æ–≤—ã—Ö
    waiting_deadline = State()  # –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω–∞


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å—Ç–æ–ª–æ–≤–æ–π


@admin_router.callback_query(lambda c: c.data and c.data.startswith("canteen:"))
async def callback_canteen_meals(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª—é–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    callback_data –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
    "canteen:<id>" ‚Äì —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    "canteen:<id>:<page>" ‚Äì –Ω—É–∂–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (0-based)
    """

    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    parts = call.data.split(":")
    if len(parts) == 2:
        _, canteen_id_str = parts
        page = 0
    else:
        _, canteen_id_str, page_str = parts
        page = int(page_str)

    canteen_id = int(canteen_id_str)

    PAGE_SIZE = 10

    async with get_session() as session:
        canteen = await session.get(Canteen, canteen_id)
        if not canteen:
            await call.answer("–°—Ç–æ–ª–æ–≤–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        meals = list(await session.exec(select(Meal).where(Meal.canteen_id == canteen_id)))

    total_pages = (len(meals) - 1) // PAGE_SIZE + 1 if meals else 1
    page = max(0, min(page, total_pages - 1))  # clamp
    slice_start = page * PAGE_SIZE
    slice_end = slice_start + PAGE_SIZE
    page_meals = meals[slice_start:slice_end]

    rows_txt = [
        f"{m.id}. {m.title} {'(üî¥)' if not m.is_active else ''}" for m in page_meals
    ]
    text = (
        f"–ú–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π ¬´{canteen.title}¬ª (—Å—Ç—Ä. {page + 1}/{total_pages}):\n"
        + ("\n".join(rows_txt) if rows_txt else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ")
    )

    kb_rows: list[list[types.InlineKeyboardButton]] = []
    for m in page_meals:
        # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ | —Å—Ç–∞—Ç—É—Å | —É–¥–∞–ª–∏—Ç—å  ‚Äì —á—Ç–æ–±—ã –Ω–µ —É—Ç—Ä–æ—è—Ç—å –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫
        info_btn = types.InlineKeyboardButton(text=m.title[:30], callback_data=f"meal_info:{m.id}:{canteen_id}")
        status_btn = types.InlineKeyboardButton(
            text="üü¢" if m.is_active else "üî¥",
            callback_data=f"meal_toggle:{m.id}:{canteen_id}",
        )
        del_btn = types.InlineKeyboardButton(text="üóë", callback_data=f"meal_del:{m.id}:{canteen_id}")
        kb_rows.append([info_btn, status_btn, del_btn])

    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    nav_row: list[types.InlineKeyboardButton] = []
    if page > 0:
        nav_row.append(
            types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"canteen:{canteen_id}:{page - 1}")
        )
    if page < total_pages - 1:
        nav_row.append(
            types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"canteen:{canteen_id}:{page + 1}")
        )
    if nav_row:
        kb_rows.append(nav_row)

    # –ø—Ä–æ—á–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    kb_rows.append([
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data=f"meal_add:{canteen_id}"),
    ])
    kb_rows.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_canteens")])
    kb_rows.append(_home_row())

    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)

    try:
        await call.message.edit_text(text, reply_markup=kb)
    except Exception:
        await call.message.answer(text, reply_markup=kb)
    await call.answer()


# –ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞


@admin_router.callback_query(lambda c: c.data and c.data.startswith("meal_add:"))
async def callback_meal_add(call: types.CallbackQuery, state: FSMContext):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, canteen_id_str = call.data.split(":", 1)
    await state.update_data(canteen_id=int(canteen_id_str))
    await state.set_state(MealAddStates.waiting_title)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    await call.answer()


# –ü—Ä–∏—ë–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞


@admin_router.message(MealAddStates.waiting_title)
async def meal_add_title(message: types.Message, state: FSMContext):
    if not await _is_admin(message.from_user.id, message.from_user.username):
        await message.reply("–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    data = await state.get_data()
    canteen_id: int | None = data.get("canteen_id")
    title = message.text.strip()

    if not title:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(new_meal_title=title, canteen_id=canteen_id)
    await state.set_state(MealAddStates.waiting_desc)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ (–∏–ª–∏ - –µ—Å–ª–∏ –ø—É—Å—Ç–æ):")


@admin_router.message(MealAddStates.waiting_desc)
async def meal_add_desc(message: types.Message, state: FSMContext):
    desc = "" if message.text.strip() == "-" else message.text.strip()
    await state.update_data(new_meal_desc=desc)

    # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –±–ª—é–¥–∞ ‚Äî –∫–æ–º–ø–ª–µ–∫—Å –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥"), types.KeyboardButton(text="–û–±—ã—á–Ω–æ–µ –±–ª—é–¥–æ")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞:", reply_markup=kb)
    await state.set_state(MealAddStates.waiting_complex)


@admin_router.message(MealAddStates.waiting_complex)
async def meal_add_complex(message: types.Message, state: FSMContext):
    txt = message.text.strip().lower()
    if txt not in {"–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥", "–æ–±—ã—á–Ω–æ–µ –±–ª—é–¥–æ"}:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥' –∏–ª–∏ '–û–±—ã—á–Ω–æ–µ –±–ª—é–¥–æ'.")
        return

    is_complex = txt.startswith("–∫–æ–º–ø–ª–µ–∫—Å")
    data = await state.get_data()
    title = data.get("new_meal_title")
    desc = data.get("new_meal_desc", "")
    canteen_id = data.get("canteen_id")

    async with get_session() as session:
        session.add(Meal(title=title, description=desc, is_complex=is_complex, canteen_id=canteen_id))
        await session.commit()

    # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª—é–¥–∞
    await message.answer(f"‚úÖ –ë–ª—é–¥–æ ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏: inline-–ø–∞–Ω–µ–ª—å –∏ reply-–∫–Ω–æ–ø–∫—É ¬´–ê–¥–º–∏–Ω¬ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=_build_admin_kb())

    admin_rkb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ê–¥–º–∏–Ω")]], resize_keyboard=True
    )
    await message.answer("\u2060", reply_markup=admin_rkb)

    await state.clear()


#  –û—Ç—á—ë—Ç—ã


@admin_router.callback_query(lambda c: c.data == "report_today")
async def callback_report_today(call: types.CallbackQuery):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        filename, buffer = await build_report(datetime.now())
    except ValueError:
        await call.message.answer("–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –µ—â—ë –Ω–µ—Ç.")
        await call.answer()
        return

    file = types.BufferedInputFile(buffer.read(), filename=filename)
    await call.message.answer_document(file, caption="–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    await call.message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=_build_admin_kb())
    await call.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏


@admin_router.callback_query(lambda c: c.data == "manage_users")
async def callback_manage_users(call: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    # –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã Telegram –Ω–µ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É timeout > 3 —Å–µ–∫
    await call.answer()

    async with get_session() as session:
        users_result = await session.exec(select(User))
        users = list(users_result)

    if not users:
        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    kb_rows: list[list[types.InlineKeyboardButton]] = []
    for u in users:
        label = f"{u.full_name or u.tg_id} {'‚≠ê' if u.is_admin else ''}"
        kb_rows.append([
            types.InlineKeyboardButton(text=label, callback_data=f"user_mng:{u.id}"),
        ])

    kb_rows.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")])
    kb_rows.append(_home_row())
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)


@admin_router.callback_query(lambda c: c.data and c.data.startswith("user_mng:"))
async def callback_user_manage(call: types.CallbackQuery):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback —Å—Ä–∞–∑—É
    await call.answer()

    _, user_id_str = call.data.split(":", 1)
    user_id = int(user_id_str)

    async with get_session() as session:
        user = await session.get(User, user_id)
        if not user:
            await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = f"<b>{user.full_name}</b>\nTG ID: <code>{user.tg_id}</code>\n–ê–¥–º–∏–Ω: {'–¥–∞' if user.is_admin else '–Ω–µ—Ç'}"

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"user_del:{user_id}")],
            [
                types.InlineKeyboardButton(
                    text="‚¨ÜÔ∏è –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º" if not user.is_admin else "‚¨áÔ∏è –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞",
                    callback_data=f"user_toggle_admin:{user_id}",
                )
            ],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")],
            _home_row(),
        ]
    )
    await call.message.answer(text, reply_markup=kb, parse_mode="HTML")


@admin_router.callback_query(lambda c: c.data and c.data.startswith("user_del:"))
async def callback_user_delete(call: types.CallbackQuery):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, user_id_str = call.data.split(":", 1)
    user_id = int(user_id_str)

    async with get_session() as session:
        user = await session.get(User, user_id)
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –∑–∞—Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await session.exec(sa_delete(Order).where(Order.user_id == user.id))
        await session.delete(user)
        await session.commit()

    await call.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    await call.answer()


@admin_router.callback_query(lambda c: c.data and c.data.startswith("user_toggle_admin:"))
async def callback_user_toggle_admin(call: types.CallbackQuery):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, user_id_str = call.data.split(":", 1)
    user_id = int(user_id_str)

    async with get_session() as session:
        user = await session.get(User, user_id)
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user.is_admin = not user.is_admin
        await session.commit()

    await call.message.answer(
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω" if user.is_admin else "‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —Å–Ω—è—Ç—ã"
    )
    await call.answer()


#  –û–ø—Ä–æ—Å—ã


@admin_router.callback_query(lambda c: c.data == "start_poll")
async def callback_start_poll(call: types.CallbackQuery, bot: Bot):
    """–°–æ–∑–¥–∞—ë—Ç –±—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –±–ª—é–¥–∞–º (–ø–µ—Ä–≤—ã–µ 10)."""
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    async with get_session() as session:
        result = await session.exec(
            select(Meal).where(Meal.is_active == True).limit(10)  # noqa: E712
        )
        meals = list(result)

    if not meals:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª—é–¥", show_alert=True)
        return

    options = [m.title for m in meals]

    poll_msg = await bot.send_poll(
        chat_id=call.message.chat.id,
        question="–ß—Ç–æ –±—É–¥–µ–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        options=options,
        is_anonymous=False,
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
    await call.message.answer("‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!", reply_markup=_build_admin_kb())
    await call.answer()


# –ú–µ–Ω—é –¥–Ω—è


# –®–∞–≥ 1. –≤—ã–±–æ—Ä —Å—Ç–æ–ª–æ–≤—ã—Ö


@admin_router.callback_query(lambda c: c.data == "start_menu")
async def callback_start_menu(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ–ª–æ–≤—ã–µ
    async with get_session() as session:
        res = await session.exec(select(Canteen).where(Canteen.is_active == True))
        canteens = list(res)

    if not canteens:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤—ã—Ö", show_alert=True)
        return

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤—ã—Ö
    await state.set_state(MenuCreateStates.waiting_canteen)
    await state.update_data(sel_cids=[])

    async def _send_picker(selected: list[int]):
        kb_rows: list[list[types.InlineKeyboardButton]] = []
        for c in canteens:
            marker = "üü¢" if c.id in selected else "‚ö™Ô∏è"
            kb_rows.append([
                types.InlineKeyboardButton(text=f"{marker} {c.title}", callback_data=f"menu_cant_toggle:{c.id}"),
            ])

        # –∫–Ω–æ–ø–∫–∞ "–í—Å–µ —Å—Ç–æ–ª–æ–≤—ã–µ" ‚Äî –∑–µ–ª—ë–Ω–∞—è –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ
        all_selected = len(selected) == len(canteens)
        all_marker = "üü¢" if all_selected else "‚ö™Ô∏è"
        kb_rows.append([
            types.InlineKeyboardButton(text=f"{all_marker} –í—Å–µ —Å—Ç–æ–ª–æ–≤—ã–µ", callback_data="menu_cant_all"),
        ])

        # –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä¬ª
        if selected:
            kb_rows.append([
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="menu_cant_reset"),
            ])

        # –ö–Ω–æ–ø–∫–∞ ¬´–î–∞–ª–µ–µ¬ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±–æ—Ä
        if selected:
            kb_rows.append([
                types.InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="menu_cant_next"),
            ])

        await call.message.answer(
            "–û—Ç–º–µ—Ç—å—Ç–µ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–æ–≤—ã–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb_rows),
        )

    await _send_picker([])
    await call.answer()


# –®–∞–≥ 2. –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç–æ–ª–æ–≤–∞—è


@admin_router.callback_query(MenuCreateStates.waiting_canteen, lambda c: c.data and c.data.startswith("menu_cant_toggle:"))
async def callback_menu_cant_toggle(call: types.CallbackQuery, state: FSMContext):
    _, cid_str = call.data.split(":", 1)
    cid = int(cid_str)

    data = await state.get_data()
    selected: list[int] = data.get("sel_cids", [])
    if cid in selected:
        selected.remove(cid)
    else:
        selected.append(cid)
    await state.update_data(sel_cids=selected)

    # –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ start_menu)
    # –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–π call —Å data="start_menu_redraw"
    new_call = call.model_copy(update={"data": "start_menu_redraw"})
    await callback_start_menu_redraw(new_call, state)  # type: ignore[arg-type]


@admin_router.callback_query(MenuCreateStates.waiting_canteen, lambda c: c.data == "start_menu_redraw")
async def callback_start_menu_redraw(call: types.CallbackQuery, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä: –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤—ã—Ö c —á–µ–∫–±–æ–∫—Å–∞–º–∏."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    selected: list[int] = data.get("sel_cids", [])

    async with get_session() as session:
        res = await session.exec(select(Canteen).where(Canteen.is_active == True))
        canteens = list(res)

    kb_rows: list[list[types.InlineKeyboardButton]] = []
    for c in canteens:
        marker = "üü¢" if c.id in selected else "‚ö™Ô∏è"
        kb_rows.append([
            types.InlineKeyboardButton(text=f"{marker} {c.title}", callback_data=f"menu_cant_toggle:{c.id}"),
        ])
    all_selected = len(selected) == len(canteens)
    all_marker = "üü¢" if all_selected else "‚ö™Ô∏è"
    kb_rows.append([
        types.InlineKeyboardButton(text=f"{all_marker} –í—Å–µ —Å—Ç–æ–ª–æ–≤—ã–µ", callback_data="menu_cant_all"),
    ])
    if selected:
        kb_rows.append([
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="menu_cant_reset"),
        ])
    if selected:
        kb_rows.append([
            types.InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="menu_cant_next"),
        ])

    try:
        await call.message.edit_reply_markup(
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
        )
    except Exception:
        pass
    await call.answer()


# –î–∞–ª–µ–µ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ–¥–ª–∞–π–Ω—É


@admin_router.callback_query(MenuCreateStates.waiting_canteen, lambda c: c.data == "menu_cant_next")
async def callback_menu_cant_next(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected: list[int] = data.get("sel_cids", [])
    if not selected:
        await call.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç–æ–ª–æ–≤—É—é", show_alert=True)
        return

    await state.update_data(canteen_sel=selected)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
    await state.set_state(MenuCreateStates.waiting_deadline)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (HH:MM, –Ω–∞–ø—Ä. 16:00):")
    await call.answer()


@admin_router.message(MenuCreateStates.waiting_deadline)
async def menu_set_deadline(message: types.Message, state: FSMContext, bot: Bot):
    if not await _is_admin(message.from_user.id, message.from_user.username):
        await message.reply("–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return

    text = message.text.strip()
    try:
        hour, minute = map(int, text.split(":", 1))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM, –Ω–∞–ø—Ä. 16:00")
        return

    tz = settings.tz

    now_local = datetime.now(tz)
    deadline_local = now_local.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if deadline_local <= now_local:
        deadline_local += timedelta(days=1)

    deadline = deadline_local.astimezone(timezone.utc)  # —Ö—Ä–∞–Ω–∏–º –≤ UTC

    data = await state.get_data()
    canteen_sel = data.get("canteen_sel")
    if not canteen_sel:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–±–æ—Ä —Å—Ç–æ–ª–æ–≤–æ–π.")
        await state.clear()
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±–ª—é–¥
    async with get_session() as session:
        if canteen_sel == "all":
            res = await session.exec(select(Meal).where(Meal.is_active == True))  # noqa: E712
        elif isinstance(canteen_sel, list):
            ids = [int(x) for x in canteen_sel]
            res = await session.exec(select(Meal).where(Meal.canteen_id.in_(ids), Meal.is_active == True))  # noqa: E712
        else:
            cid = int(canteen_sel)
            res = await session.exec(select(Meal).where(Meal.canteen_id == cid, Meal.is_active == True))  # noqa: E712
        meals = list(res)

    if not meals:
        await message.reply("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª—é–¥")
        await state.clear()
        return

    meal_ids = [m.id for m in meals]

    from foodbot.services.menus import create_menu

    # 1. –ü—É–±–ª–∏–∫—É–µ–º –º–µ–Ω—é –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –≥—Ä—É–ø–ø–æ–π –∞–¥–º–∏–Ω–æ–≤)
    primary_menu = await create_menu(bot=bot, chat_id=message.chat.id, deadline=deadline, meal_ids=meal_ids, primary=True)

    # 2. –†–∞—Å—Å—ã–ª–∞–µ–º –∫–æ–ø–∏–∏ –≤—Å–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    from foodbot.models import User
    async with get_session() as session:
        users_res = await session.exec(select(User).where(User.is_approved == True))  # noqa: E712
        users = list(users_res)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ; –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
    for u in users:
        if u.tg_id == message.chat.id:
            continue  # —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—ã—à–µ
        try:
            await create_menu(bot=bot, chat_id=u.tg_id, deadline=deadline, meal_ids=meal_ids, parent_id=primary_menu.id)
        except Exception as e:  # noqa: BLE001
            import logging
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", u.tg_id, e)

    await message.reply(
        "‚úÖ –ú–µ–Ω—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤ " + deadline_local.strftime("%H:%M")
    )
    await state.clear()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞


def _build_admin_kb() -> types.InlineKeyboardMarkup:
    rows = [
        [types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="manage_users")],
        [types.InlineKeyboardButton(text="üè¢ –°—Ç–æ–ª–æ–≤—ã–µ", callback_data="list_canteens")],
        [types.InlineKeyboardButton(text="üó≥Ô∏è –û–ø—Ä–æ—Å", callback_data="start_menu")],
        [types.InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data="menu_close")],
        [types.InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç (—Å–µ–≥–æ–¥–Ω—è)", callback_data="report_today")],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@admin_router.callback_query(lambda c: c.data == "admin")
async def callback_admin_menu(call: types.CallbackQuery):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    await call.message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=_build_admin_kb())

    admin_rkb = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="–ê–¥–º–∏–Ω")]], resize_keyboard=True)
    await call.message.answer("\u2060", reply_markup=admin_rkb)

    await call.answer()


# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è ¬´–ú–µ–Ω—é¬ª


def _home_row() -> list[types.InlineKeyboardButton]:
    return [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin")]


#  –î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é


@admin_router.callback_query(lambda c: c.data == "menu_close")
async def callback_menu_close(call: types.CallbackQuery, bot: Bot):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    from datetime import datetime, timezone
    from foodbot.services.menus import close_menu

    async with get_session() as session:
        now = datetime.utcnow().replace(tzinfo=timezone.utc)
        res = await session.exec(
            select(DailyMenu).where(
                DailyMenu.chat_id == call.message.chat.id,
                DailyMenu.is_closed == False,  # noqa: E712
                DailyMenu.deadline > now,
            )
        )
        menu = res.first()

    if not menu:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é", show_alert=True)
        return

    await close_menu(bot, menu)
    await call.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")


#  –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é


@admin_router.callback_query(lambda c: c.data == "menu_copy")
async def callback_menu_copy(call: types.CallbackQuery, state: FSMContext):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    from datetime import datetime, timezone
    async with get_session() as session:
        res = await session.exec(
            select(DailyMenu).where(DailyMenu.chat_id == call.message.chat.id).order_by(DailyMenu.id.desc())
        )
        last_menu = res.first()

    if not last_menu:
        await call.answer("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    async with get_session() as session:
        items_res = await session.exec(select(MenuItem).where(MenuItem.menu_id == last_menu.id))
        meal_ids = [itm.meal_id for itm in items_res]

    if not meal_ids:
        await call.answer("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –ø—É—Å—Ç–æ", show_alert=True)
        return

    await state.update_data(meal_ids=meal_ids)
    await state.set_state(MenuCreateStates.waiting_deadline)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (HH:MM, –Ω–∞–ø—Ä. 16:00):")
    await call.answer()


#  –¢–æ–≥–≥–ª/—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–≤—ã—Ö


@admin_router.callback_query(lambda c: c.data and c.data.startswith("canteen_toggle:"))
async def callback_canteen_toggle(call: types.CallbackQuery, state: FSMContext):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, cid_str = call.data.split(":", 1)
    cid = int(cid_str)

    async with get_session() as session:
        canteen = await session.get(Canteen, cid)
        if not canteen:
            await call.answer("–°—Ç–æ–ª–æ–≤–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        canteen.is_active = not canteen.is_active
        await session.commit()

    await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
    await callback_list_canteens(call, state)


@admin_router.callback_query(lambda c: c.data and c.data.startswith("canteen_del:"))
async def callback_canteen_delete(call: types.CallbackQuery, state: FSMContext):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, cid_str = call.data.split(":", 1)
    cid = int(cid_str)

    async with get_session() as session:
        canteen = await session.get(Canteen, cid)
        if not canteen:
            await call.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        await session.delete(canteen)
        await session.commit()

    await call.answer("–£–¥–∞–ª–µ–Ω–æ")
    await callback_list_canteens(call, state)


#  –¢–æ–≥–≥–ª –±–ª—é–¥–∞


@admin_router.callback_query(lambda c: c.data and c.data.startswith("meal_toggle:"))
async def callback_meal_toggle(call: types.CallbackQuery, state: FSMContext):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, rest = call.data.split(":", 1)
    meal_id_str, canteen_id_str = rest.split(":", 1)
    meal_id = int(meal_id_str)
    canteen_id = int(canteen_id_str)

    async with get_session() as session:
        meal = await session.get(Meal, meal_id)
        if not meal:
            await call.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        meal.is_active = not meal.is_active
        await session.commit()

    await call.answer("–°—Ç–∞—Ç—É—Å –±–ª—é–¥–∞ –æ–±–Ω–æ–≤–ª—ë–Ω")

    # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é callback —Å data="canteen:<id>" –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    new_call = call.model_copy(update={"data": f"canteen:{canteen_id}"})
    await callback_canteen_meals(new_call, state)


# ===== –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ =====


@admin_router.callback_query(lambda c: c.data and c.data.startswith("meal_del:"))
async def callback_meal_delete(call: types.CallbackQuery, state: FSMContext):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, rest = call.data.split(":", 1)
    meal_id_str, canteen_id_str = rest.split(":", 1)
    meal_id = int(meal_id_str)
    canteen_id = int(canteen_id_str)

    async with get_session() as session:
        meal = await session.get(Meal, meal_id)
        if not meal:
            await call.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        await session.exec(sa_delete(Order).where(Order.meal_id == meal.id))
        await session.delete(meal)
        await session.commit()

    await call.answer("–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å—Ç–æ–ª–æ–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–ø–∏–µ–π
    new_call = call.model_copy(update={"data": f"canteen:{canteen_id}"})
    await callback_canteen_meals(new_call, state)


# ===== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ =====


@admin_router.callback_query(lambda c: c.data and c.data.startswith("meal_info:"))
async def callback_meal_info(call: types.CallbackQuery):
    if not await _is_admin(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, rest = call.data.split(":", 1)
    meal_id_str, canteen_id_str = rest.split(":", 1)
    meal_id = int(meal_id_str)
    canteen_id = int(canteen_id_str)

    async with get_session() as session:
        meal = await session.get(Meal, meal_id)
        if not meal:
            await call.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

    text = f"<b>{meal.title}</b>\n\n{meal.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n–¢–∏–ø: {'–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥' if meal.is_complex else '–±–ª—é–¥–æ'}"

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"canteen:{canteen_id}")],
            _home_row(),
        ]
    )
    await call.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await call.answer()


# === ¬´–í—Å–µ —Å—Ç–æ–ª–æ–≤—ã–µ¬ª ‚Äî –±—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ ===


@admin_router.callback_query(MenuCreateStates.waiting_canteen, lambda c: c.data == "menu_cant_all")
async def callback_menu_cant_all(call: types.CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ç–æ–ª–æ–≤—ã–µ (–ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ—Ç, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –¥–∞–ª–µ–µ)."""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤—ã—Ö
    async with get_session() as session:
        res = await session.exec(select(Canteen.id).where(Canteen.is_active == True))
        all_ids = list(res)

    await state.update_data(sel_cids=all_ids)

    # –¢—Ä–∏–≥–≥–µ—Ä–∏–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
    new_call = call.model_copy(update={"data": "start_menu_redraw"})
    await callback_start_menu_redraw(new_call, state)  # type: ignore[arg-type]


# === –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ ===


@admin_router.callback_query(MenuCreateStates.waiting_canteen, lambda c: c.data == "menu_cant_reset")
async def callback_menu_cant_reset(call: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤—ã—Ö."""
    await state.update_data(sel_cids=[])
    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å
    new_call = call.model_copy(update={"data": "start_menu_redraw"})
    await callback_start_menu_redraw(new_call, state)  # type: ignore[arg-type] 