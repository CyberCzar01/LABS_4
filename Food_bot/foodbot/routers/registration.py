"""–ú–∞—Ä—à—Ä—É—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlmodel import select

from foodbot.config import settings
from foodbot.database import get_session
from foodbot.models import User

registration_router = Router()


class RegStates(StatesGroup):
    waiting_full_name = State()


async def _get_admin_ids(bot: Bot) -> list[int]:
    """–ü–æ–ª—É—á–∏—Ç—å tg_id –∞–¥–º–∏–Ω–æ–≤ –ø–æ username –∏–∑ .env (one-time lookup)."""
    admin_ids: set[int] = set()

    # 1. usernames –∏–∑ .env
    for raw_username in settings.admin_usernames.split() or []:
        raw_username = raw_username.strip()
        if not raw_username:
            continue
        try:
            chat = await bot.get_chat(raw_username)
            admin_ids.add(chat.id)
        except Exception:  # noqa: BLE001
            continue

    # 2. –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ —Å is_admin=True
    async with get_session() as session:
        res = await session.exec(select(User.tg_id).where(User.is_admin == True))  # noqa: E712
        admin_ids.update(res)

    return list(admin_ids)


@registration_router.message(Command("register"))
async def cmd_register(message: types.Message, state: FSMContext) -> None:
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω-username ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if message.from_user.username and message.from_user.username.lstrip("@") in [u.lstrip("@") for u in settings.admin_usernames.split()]:
        # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∞–¥–º–∏–Ω
        async with get_session() as session:
            result = await session.exec(select(User).where(User.tg_id == message.from_user.id))
            user = result.first()
            if not user:
                user = User(tg_id=message.from_user.id, full_name=message.from_user.full_name or "", is_admin=True, is_approved=True)
                session.add(user)
            else:
                user.is_admin = True
                user.is_approved = True
            await session.commit()

        await message.answer("‚úÖ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    async with get_session() as session:
        existing = await session.exec(select(User).where(User.tg_id == message.from_user.id))
        user = existing.first()
        if user and user.is_approved:
            await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(RegStates.waiting_full_name)


@registration_router.message(RegStates.waiting_full_name, F.text.len() > 3)
async def process_full_name(message: types.Message, state: FSMContext, bot: Bot) -> None:
    full_name = message.text.strip()

    async with get_session() as session:
        stmt = select(User).where(User.tg_id == message.from_user.id)
        result = await session.exec(stmt)
        user = result.first()
        if not user:
            user = User(tg_id=message.from_user.id, full_name=full_name, is_approved=False)
            session.add(user)
            await session.commit()
        else:
            user.full_name = full_name
            await session.commit()

    if user.is_admin:
        # –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        async with get_session() as session:
            result = await session.exec(select(User).where(User.tg_id == user.tg_id))
            db_user = result.first()
            if db_user and not db_user.is_approved:
                db_user.is_approved = True
                await session.commit()
        await message.answer("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω (–≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).")
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        admin_ids = await _get_admin_ids(bot)
        for admin_id in admin_ids:
            await bot.send_message(
                admin_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (id={message.from_user.id}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{message.from_user.id}"
                            ),
                            types.InlineKeyboardButton(
                                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{message.from_user.id}"
                            ),
                        ]
                    ]
                ),
            )

    await state.clear()


@registration_router.callback_query(F.data.startswith("approve:"))
async def callback_approve(call: types.CallbackQuery, bot: Bot) -> None:  # noqa: D401
    _, user_id_str = call.data.split(":", 1)
    user_id = int(user_id_str)

    async with get_session() as session:
        result = await session.exec(select(User).where(User.tg_id == user_id))
        user = result.first()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            # –£–±–µ—Ä—ë–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω—ã –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å —Å–Ω–æ–≤–∞
            await call.message.edit_reply_markup(reply_markup=None)
            return

        if user.is_approved:
            await call.answer("–£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", show_alert=True)
            await call.message.edit_reply_markup(reply_markup=None)
            return

        user.is_approved = True
        await session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(user_id, "üéâ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞–∫–∞–∑–∞—Ö.")
    except Exception:
        pass

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–∂–∏–º–∞–ª–∏
    await call.message.edit_reply_markup(reply_markup=None)
    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")


@registration_router.callback_query(F.data.startswith("reject:"))
async def callback_reject(call: types.CallbackQuery, bot: Bot) -> None:  # noqa: D401
    _, user_id_str = call.data.split(":", 1)
    user_id = int(user_id_str)

    async with get_session() as session:
        result = await session.exec(select(User).where(User.tg_id == user_id))
        user = result.first()

        if not user:
            await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            await call.message.edit_reply_markup(reply_markup=None)
            return

        if user.is_approved:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º", show_alert=True)
            await call.message.edit_reply_markup(reply_markup=None)
            return

        await session.delete(user)
        await session.commit()

    try:
        await bot.send_message(user_id, "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception:
        pass

    await call.message.edit_reply_markup(reply_markup=None)
    await call.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ") 