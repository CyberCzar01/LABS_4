from __future__ import annotations

import asyncio
from datetime import datetime, timezone
from typing import Sequence
from zoneinfo import ZoneInfo

from aiogram import Bot, types
from sqlmodel import select
from sqlalchemy.orm import selectinload

from foodbot.database import get_session
from foodbot.models import DailyMenu, MenuItem, Meal, Order, User
from foodbot.config import settings

__all__ = [
    "create_menu",
    "close_menu",
    "deadline_checker",
]


async def create_menu(*, bot: Bot, chat_id: int, deadline: datetime, meal_ids: Sequence[int], primary: bool = False, parent_id: int | None = None) -> DailyMenu:  # noqa: D401
    """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç DailyMenu/Item."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª—é–¥–∞
    async with get_session() as session:
        stmt = select(Meal).where(Meal.id.in_(meal_ids)).options(selectinload(Meal.canteen))
        meals = list(await session.exec(stmt))
    if not meals:
        raise ValueError("no_meals")

    tz = settings.tz
    dl_local = deadline.astimezone(tz)
    text_lines = [
        f"üçΩÔ∏è –ó–∞–∫–∞–∑ –Ω–∞ {dl_local.strftime('%d.%m')} (–¥–æ {dl_local.strftime('%H:%M')})",
        "",
    ]
    # –ü–µ—Ä–µ—á–∏—Å–ª—è–µ–º –±–ª—é–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—é –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π.
    if len({m.canteen.id if m.canteen else 0 for m in meals}) == 1:
        for idx, meal in enumerate(meals, start=1):
            prefix = ""
            if meal.canteen:
                prefix = f"{meal.canteen.title} ‚Äî "

            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±–ª—é–¥ (–Ω–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö) –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å,
            # —á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.
            title_part = meal.title
            if not meal.is_complex and meal.description:
                title_part = f"{meal.title} ({meal.description})"

            text_lines.append(f"{idx}. {prefix}{title_part}")
    text = "\n".join(text_lines)

    # === –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ===

    # –ï—Å–ª–∏ –±–ª—é–¥–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–æ–ª–æ–≤—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤—ã—Ö,
    # –∏–Ω–∞—á–µ —Å—Ä–∞–∑—É —Å–ø–∏—Å–æ–∫ –±–ª—é–¥.

    canteen_ids = {m.canteen.id if m.canteen else 0 for m in meals}

    def _manage_rows(rows: list[list[types.InlineKeyboardButton]]) -> list[list[types.InlineKeyboardButton]]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ (–æ—Ç–º–µ–Ω–∞ / –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞)."""
        rows.append([types.InlineKeyboardButton(text="ü§∑‚Äç‚ôÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="menu_cancel")])
        rows.append([types.InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="menu_submit")])
        return rows

    if len(canteen_ids) > 1:
        # –ü–µ—Ä–≤—ã–º —à–∞–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–æ–ª–æ–≤—É—é
        kb_rows: list[list[types.InlineKeyboardButton]] = []
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ —Å—Ç–æ–ª–æ–≤—ã–º, —á—Ç–æ–±—ã –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª-–≤–æ/–ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        id2title: dict[int, str] = {}
        for m in meals:
            if m.canteen:
                id2title[m.canteen.id] = m.canteen.title
            else:
                id2title[0] = "–ü—Ä–æ—á–µ–µ"

        # –°—Ç–æ–ª–æ–≤—ã–µ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for cid, title in sorted(id2title.items(), key=lambda t: t[1].lower()):
            kb_rows.append([
                types.InlineKeyboardButton(text=title, callback_data=f"menu_can:{cid}")
            ])

        markup = types.InlineKeyboardMarkup(inline_keyboard=_manage_rows(kb_rows))
    else:
        # –û–¥–Ω–∞ —Å—Ç–æ–ª–æ–≤–∞—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª—é–¥–∞ –Ω–∞–ø—Ä—è–º—É—é, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        kb_rows: list[list[types.InlineKeyboardButton]] = []
        for idx, meal in enumerate(meals):
            label = meal.title
            if not meal.is_complex and meal.description:
                label = f"{meal.title} ({meal.description})"
                # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–æ–π
                if len(label) > 60:
                    label = label[:57] + "‚Ä¶"

            select_btn = types.InlineKeyboardButton(text=label, callback_data=f"menu:{idx}")
            info_btn = types.InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"menuinfo:{idx}")
            kb_rows.append([select_btn, info_btn])
        markup = types.InlineKeyboardMarkup(inline_keyboard=_manage_rows(kb_rows))

    msg = await bot.send_message(chat_id, text, reply_markup=markup)

    async with get_session() as session:
        menu = DailyMenu(message_id=msg.message_id, chat_id=msg.chat.id, deadline=deadline.astimezone(timezone.utc), is_primary=primary, parent_id=parent_id)
        session.add(menu)
        await session.commit()
        await session.refresh(menu)
        for idx, meal in enumerate(meals):
            session.add(MenuItem(menu_id=menu.id, meal_id=meal.id, button_index=idx))
        await session.commit()
    return menu


async def _orders_for_menu(menu: DailyMenu):
    async with get_session() as session:
        items_res = await session.exec(select(MenuItem).where(MenuItem.menu_id == menu.id))
        meal_ids = [itm.meal_id for itm in items_res]
        orders_res = await session.exec(select(Order).where(Order.meal_id.in_(meal_ids), Order.is_final == True))  # noqa: E712
        return list(orders_res)


async def close_menu(bot: Bot, menu: DailyMenu) -> None:
    """–ü–æ–º–µ—á–∞–µ—Ç –º–µ–Ω—é –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–æ –∏ —É–±–∏—Ä–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏."""
    if menu.is_closed:
        return

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.edit_message_reply_markup(menu.chat_id, menu.message_id, reply_markup=None)
        await bot.edit_message_text(
            chat_id=menu.chat_id,
            message_id=menu.message_id,
            text="‚ùå –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω\n" + ("\n".join((await _format_summary(menu)))),
        )
    except Exception:  # noqa: BLE001
        pass

    # —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç
    async with get_session() as session:
        db_menu = await session.get(DailyMenu, menu.id)
        if db_menu:
            db_menu.is_closed = True
            await session.commit()

    # –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –º–µ–Ω—é
    if not menu.is_primary:
        return

    try:
        from foodbot.services.orders import build_menu_report
        from foodbot.routers.registration import _get_admin_ids

        filename, buffer = await build_menu_report(menu.id)

        admin_ids = await _get_admin_ids(bot)
        for aid in admin_ids:
            try:
                buffer.seek(0)
                await bot.send_document(
                    aid,
                    types.BufferedInputFile(buffer.read(), filename=filename),
                    caption="üìä –û—Ç—á—ë—Ç ‚Äî –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                )
            except Exception:  # noqa: BLE001
                continue
    except ValueError:
        # –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        pass


async def _format_summary(menu: DailyMenu) -> list[str]:
    orders = await _orders_for_menu(menu)
    summary: dict[int, int] = {}
    for order in orders:
        summary[order.meal_id] = summary.get(order.meal_id, 0) + 1

    if not summary:
        return ["–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç"]

    async with get_session() as session:
        meals_res = await session.exec(select(Meal).where(Meal.id.in_(summary.keys())))
        id_to_title: dict[int, str] = {}
        for m in meals_res:
            title = m.title
            if not m.is_complex and m.description:
                title = f"{m.title} ({m.description})"
            id_to_title[m.id] = title

    return [f"‚Ä¢ {id_to_title[mid]} ‚Äî {cnt} —à—Ç." for mid, cnt in summary.items()]


async def deadline_checker(bot: Bot, *, interval_sec: int = 60) -> None:  # noqa: D401
    """–§–æ–Ω–æ–≤–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞: –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –º–µ–Ω—é."""
    while True:
        now = datetime.utcnow().replace(tzinfo=timezone.utc)
        async with get_session() as session:
            res = await session.exec(
                select(DailyMenu).where(DailyMenu.is_closed == False, DailyMenu.deadline <= now)  # noqa: E712
            )
            menus = list(res)
        for menu in menus:
            await close_menu(bot, menu)
        await asyncio.sleep(interval_sec) 